package com.example.projectpam

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.Button
import androidx.compose.material3.Icon
import androidx.compose.material3.NavigationBar
import androidx.compose.material3.NavigationBarItem
import androidx.compose.material3.NavigationBarItemColors
import androidx.compose.material3.NavigationBarItemDefaults
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clipToBounds
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.projectpam.ui.theme.ProjectPAMTheme

//class HomepageScreen : ComponentActivity() {
//    override fun onCreate(savedInstanceState: Bundle?) {
//        super.onCreate(savedInstanceState)
//        enableEdgeToEdge()
//        setContent {
//            ProjectPAMTheme {
//                Homepage()
//            }
//        }
//    }
//}

@Composable
fun Homepage(
    GoToNextScreen: () -> Unit
){

    val bottomNavItems = listOf(
        BottomNavItem(
            title = "Home",
            route = "home",
            SelectedIcon = ImageVector.vectorResource(id = R.drawable.home_filled),
            UnSelectedIcon = ImageVector.vectorResource(id = R.drawable.home)
        ),
        BottomNavItem(
            title = "Menu",
            route = "menu",
            SelectedIcon = ImageVector.vectorResource(id = R.drawable.coffee_filled),
            UnSelectedIcon = ImageVector.vectorResource(id = R.drawable.coffee)
        ),
        BottomNavItem(
            title = "Reciept",
            route = "reciept",
            SelectedIcon = ImageVector.vectorResource(id = R.drawable.reciept),
            UnSelectedIcon = ImageVector.vectorResource(id = R.drawable.reciept)
        ),
        BottomNavItem(
            title = "Profile",
            route = "profile",
            SelectedIcon = ImageVector.vectorResource(id = R.drawable.person_filled),
            UnSelectedIcon = ImageVector.vectorResource(id = R.drawable.person)
        )
    )

    var selected by remember {
        mutableIntStateOf(0)
    }

    Scaffold(
        bottomBar = {
            NavigationBar {
                bottomNavItems.forEachIndexed { index, bottomNavItem ->
                    NavigationBarItem(
                        selected = index == selected,
                        onClick = { selected = index },
                        icon = {
                            Icon(imageVector =
                            if (index == selected){
                                bottomNavItem.SelectedIcon
                            }else {
                                bottomNavItem.UnSelectedIcon
                            }, contentDescription = bottomNavItem.title)
                        },
                        colors = NavigationBarItemColors(
                            selectedIconColor = Color(0xFF946534),
                            selectedTextColor = NavigationBarItemDefaults.colors().selectedTextColor,
                            selectedIndicatorColor = NavigationBarItemDefaults.colors().selectedIndicatorColor,
                            unselectedIconColor = NavigationBarItemDefaults.colors().unselectedIconColor,
                            unselectedTextColor = NavigationBarItemDefaults.colors().unselectedTextColor,
                            disabledIconColor = NavigationBarItemDefaults.colors().disabledIconColor,
                            disabledTextColor = NavigationBarItemDefaults.colors().disabledTextColor
                        ),
                    )
                }
            }
        }
    ) { paddingValues ->
        dashboard(paddingValues = paddingValues)
    }
}

@Composable
fun dashboard(paddingValues: PaddingValues) {

    var search by remember {
        mutableStateOf("")
    }

    Column(
        Modifier
            .fillMaxSize()
            .background(color = Color(android.graphics.Color.parseColor("#eeeefb"))),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        ConstraintLayout {
            val (topImg, searchField) = createRefs()

            Box(
                Modifier
                    .fillMaxWidth()
                    .height(245.dp)
                    .constrainAs(topImg) {
                        top.linkTo(parent.top)
                        start.linkTo(parent.start)
                    }
                    .background(
                        color = Color(android.graphics.Color.parseColor("#946534")),
                        shape = RoundedCornerShape(bottomEnd = 48.dp, bottomStart = 40.dp)
                    )
            )

            Row(
                Modifier
                    .padding(top = 48.dp, start = 24.dp, end = 24.dp)
                    .fillMaxWidth()
            ) {
                Column(
                    Modifier
                        .height(100.dp)
                        .padding(start = 14.dp)
                        .weight(0.7f),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.Start
                ) {
                    Text(text = "Selamat Datang", color = Color.White, fontSize = 18.sp)
                    Text(text = "Noval Raihan Ramadhan", Modifier.padding(top = 14.dp), color = Color.White, fontSize = 22.sp, fontWeight = FontWeight.Bold)
                }
                Image(painter = painterResource(id = R.drawable.group_330), contentDescription = "Bell", modifier = Modifier
                    .align(Alignment.Top)
                    .size(30.dp))
            }

            // Search Field
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 0.dp, start = 24.dp, end = 24.dp)
                    .shadow(3.dp, shape = RoundedCornerShape(20.dp))
                    .background(color = Color.White, shape = RoundedCornerShape(20.dp))
                    .constrainAs(searchField) {
                        top.linkTo(topImg.bottom)
                        bottom.linkTo(topImg.bottom)
                        start.linkTo(parent.start)
                        end.linkTo(parent.end)
                    }
            ) {
                Icon(
                    Icons.Rounded.Search,
                    contentDescription = "Search",
                    modifier = Modifier.padding(10.dp)
                )

                TextField(
                    value = search,
                    onValueChange = { search = it },
                    placeholder = { Text(text = "Mau kudapan apa hari ini ?") },
                    colors = TextFieldDefaults.colors(
                        unfocusedContainerColor = Color.Transparent,
                        unfocusedIndicatorColor = Color.Transparent,
                        focusedIndicatorColor = Color.Transparent,
                        focusedContainerColor = Color.Transparent
                    )
                )
            }
        }

        // Banner
        Image(
            painter = painterResource(id = R.drawable.banner),
            contentDescription = "banner",
            modifier = Modifier
                .padding(top = 10.dp, start = 24.dp, end = 24.dp)
                .fillMaxWidth()
                .height(170.dp)
        )

        Row(
            Modifier
                .fillMaxWidth()
                .padding(top = 24.dp, start = 24.dp, end = 24.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(
                text = "Makanan Favorit",
                color = Color.Black,
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold
            )

            Text(
                text = "Lihat semua",
                color = Color(0xFF946534),
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
        }
    }
}


@Composable
fun MakananRecycleView(makanan: List<String>) {

}

@Preview(showBackground = true)
@Composable
fun HomepagePreview(){
    Homepage {

    }
}




